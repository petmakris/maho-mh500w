component odometer;

pin in float        velocity;
pin in bit          powered_on;

pin out float       total_distance;
pin out float       current_distance;
pin out bit         active;
pin out unsigned    cycles;

param rw float      trigger_distance    = 3000;
param rw unsigned   active_duration     = 15000;
param rw bit        active_on_boot      = false;

function _;
license "GPL";
;;

static unsigned time_active_counter;
static double distance;
static double dx;

FUNCTION(_) {
    dx = velocity * (fperiod);
    total_distance += dx;

    if (powered_on) {
        if (active) {
            time_active_counter += (period / 1000000);
            active = time_active_counter > active_duration;
        } else {
            if (active_on_boot == true) {
                active_on_boot = false;
                active = true;
                cycles += 1;
                time_active_counter = 0;
                current_distance = 0;
            }
            current_distance += dx;
            if (current_distance > trigger_distance) {
                active = true;
                cycles += 1;
                time_active_counter = 0;
                current_distance = 0;
            }
        }
    } else {
        active = false;
        time_active_counter = 0;
        current_distance = 0;
    }
}
